title: Introduction to Node.js with Express
tagline: Learn how to make a basic server with Node.js and Express.js
description: Node.js gives you the ability to run JavaScript files on the server-side. Express is a library for Node.js, that allows you to make requests to different "endpoints" and get a response back.
tags:
  - Node.js
  - Express
  - JavaScript
  - JSON
  - API

template:
  name: node-express-course
  repo: node-express-template
  description: An introduction to Node.js and Express.js servers
before:
  - type: createIssue
    title: Prepare your environment
    body: 00-intro.md

steps:
  - title: Learning Objectives
    description: Overview of what you will learn in this course
    event: issues.closed
    link: "{{ repoUrl }}/issues/1"
    actions:
      - type: respond
        with: 00-complete.md
        issue: 1
      - type: createIssue
        title: Set up Node.js environment
        body: 01-environment.md

  - title: Set up Node.js environment
    description: Install and configure project
    event: push
    link: "{{ repoUrl }}/issues/2"
    actions:
      - type: createIssue
        title: Start express server
        body: 02-start-server.md
      - type: closeIssue
        issue: 2
      - type: respond
        with: 01-complete.md
        issue: 2

  - title: Start Express server
    description: Configure express and start server
    event: push
    link: "{{ repoUrl }}/issues/3"
    actions:
      - type: createIssue
        title: Get JSON data
        body: 03-get-json-data.md
      - type: closeIssue
        issue: 3
      - type: respond
        with: 02-complete.md
        issue: 3

  - title: Get JSON data
    description: Respond to GET request with JSON data
    event: push
    link: "{{ repoUrl }}/issues/4"
    actions:
      - type: createIssue
        title: Use Variables in URL
        body: 04-get-data-with-var.md
      - type: closeIssue
        issue: 4
      - type: respond
        with: 03-complete.md
        issue: 4

  - title: Use Variables in URL
    description: Use a variable in URL to make dynamic GET requests
    event: push
    link: "{{ repoUrl }}/issues/5"
    actions:
      - type: createIssue
        title: Making a Post Route
        body: 05-post-data.md
      - type: closeIssue
        issue: 5
      - type: respond
        with: 04-complete.md
        issue: 5

  - title: Making a Post Route
    description: Listen for POST requests, such as form data
    event: push
    link: "{{ repoUrl }}/issues/6"
    actions:
      - type: createIssue
        title: Use Postman for POST request
        body: 06-postman.md
      - type: closeIssue
        issue: 6
      - type: respond
        with: 05-complete.md
        issue: 6

  - title: Use Postman for POST request
    description: Use Postman to test post routes
    event: issues.closed
    link: "{{ repoUrl }}/issues/7"
    actions:
      - type: createIssue
        title: Writing Express middleware
        body: 08-next-steps.md
      - type: respond
        with: 06-complete.md
        issue: 7

  - title: Your next steps
    description: See what else you can learn about Node and Express
    event: issue_comment
    link: "{{ repoUrl }}/issues/8"
    actions:
      - type: closeIssue
        issue: 8
      - type: respond
        with: 08-complete.md
        issue: 8
